[1. 강사 소개]
강사 한기용
keeyonghan@hotmail.com
실리콘밸리 출신 개발자


[2. 요즘 세상의 배움이란?]
정체기를 잘 버티기
내가 뭘 모르는지 생각하기
잘하는 사람보고 비교하거나 기죽지 않기 <- 가장 중요


[3. 데이터베이스가 왜 필요한가?]
모든 서비스는 데이터를 만들어내고, 이는 기록되어야 함

데이터베이스의 종류
- 관계형 데이터베이스(RDBMS) _프로덕션용RDBMS, 데이터 웨어하우스용RDBMS
- 비관계형 데이터베이스(NoSQL) _크게 4종류(Key/Value, Document, Wide Column Search Engine)
* 보통 프로덕션


[4. 백엔드 시스템 구성도 예제 보기]
개발직군의 종류
- 프론트엔드 : 사용자와 인터랙션을 하는 부분, 사용자에게 노출되는 서비스
- 백엔드 : 사용자에게 보이지 않지만, 실제 데이터를 저장/추가하고 사용자가 요구한 일을 수행하는 부분
- 풀스택 : 프론트 + 백엔드
- 데브옵스 : 백엔드에 집중을 두고 서비스의 운영을 책임지는 팀
- 데이터 직군 : 데이터 엔지니어, 데이터 분석가, 데이터 과학자

시스템 구성
- 2 tier : Client(Frontend) & Server(Backend)
- 3 tier : Presentation(Frontend) & Application(Backend) & Data(Backend)

백엔드 개발자로써 중요한 부분
- 데이터 모델을 잘 만들기
- 속도 개선을 위한 쿼리 성능 모니터링, 필요시 성능 개선 수행


[5. 관계형 데이터베이스 소개]
관계형 데이터베이스(RDBMS)
- 구조화된 데이터를 저장하고 질의할 수 있도록 해주는 Strorage
* 컬럼과 레코드로 구조화(엑셀 스프레드시트 형태)
* 조작하는 언어 : SQL

대표적 관계형 데이터베이스
- 프로덕션 데이터베이스 (OLTP)
* 빠른 속도에 집중
- 데이터 웨어하우스 (OLAP)
* 처리 데이터 크기에 집중
-> 보통 프로덕션 데이터베이스를 복사해서 데이터 웨어하우스에 저장

관계형 데이터베이스의 구조
1. 데이터베이스(스키마)
2. 테이블
- 데이터베이스라는 폴더 아래에 테이블이 존재

테이블의 구조
- 레코드 (행)
- 필드 (컬럼) _이름 + 타입 + 속성(제약조건) 


[6. SQL 소개]
SQL : 구조화된 데이터 질의 언어
- DDL : 테이블의 구조를 정의
- DML : 테이블에서 원하는 레코드를 읽어오는 질의 언어, 레코드를 추가/삭제/갱신

SQL의 단점
- 구조화된 데이터를 다루는데 최적화 되어 있음
(비구조화된 데이터를 다룰 때 제약이 다소 존재)
- 관계형 데이터베이스마다 SQL 문법이 조금씩 상이

Star schema
- 데이터를 논리적 단위로 나눠 저장하고 필요시 조인
- 예시
ex) 매장, 제품, 기간, 직원 테이블 PK를 -> 매출 테이블의 FK로
(매출 테이블이 가운데로 두면, 별모양 비슷)
- 장점 : 스토리지의 낭비가 덜하고(데이터중복x) 업데이트가 쉬움(논리적 단위로 나뉘어있음)
- 프로덕션 데이터베이스에서는 보통 스타 스키마 사용

Denormalized schema
- NoSQL이나 데이터 웨어하우스에서 사용
- 스토리를 더 사용하지만, 조인이 필요없어 빠름

규칙 정하기
- 대/소문자, 단수형/복수형(User/Users), Underbar(_) / Cmaelcase













