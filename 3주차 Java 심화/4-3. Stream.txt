Stream 
* 데이터의 연속, 요소들이 하나씩 흘러가면서 처리된다는 의미를 가짐
System.in도 PrintStream (public static final PrintStream in;)

- 자바8부터 Collection객체를 Stream으로 사용하는 방법 제공
- filter, map, forEach같은 고차 함수가 제공됨
- 강력한 기능을 간결하게 표현 가능

* 위에서 구현한 것과는 다소 차이가 있음, lazy어쩌고가 적용 & parellel()로 병렬처리도 가능해 효율적

- Generic Type Stream : Stream<T>
- Primitive Type Stream : IntStream, LongStream, DoubleStream

---------------------------------
Stream : 요소들이 하나씩 흘러가면서 처리된다는 의미를 가짐
1회성 메소드를 자주 사용하므로 Anonymous Object(+람다)를 많이 사용

어떠한 입력 데이터(생성된 스트림)를 가지고 필요한 과정을 거치면서 아웃풋 데이터를 생성해낸다.
원본을 변경하지는 않고 원하는 데이터를 생성해내는 과정
여러번 재사용 하지 않는 일회용
내부 반복으로 작업을 처리한다

사용 예)
<Steam 생성하기>
배열을 Stream으로 : Arrays.stream(names)
컬렉션객체를 Stream으로 : list.stream()
* 컬렉션객체를 배열로 : books.toArray(Book[]::new);

<Stream 사용하기(중간연산)>
중복되지 않는 값만 뽑아내기 : distinct()
데이터 10개만 뽑아내기 : limit(10)
PrimitiveType&String 배열 정렬하기 : sorted()
객체배열&리스트 정렬하기 : sorted((o1, o2)->o1.getName().compareTo(o2.getName()))
필터링 하기 : filter(s->s.getScore()>80)
인스턴스들에 대해 조건이 하나라도 맞는지 : anyMatch(s -> s instanceof Student)
인스턴스들에 대해 조건이 모두 맞는지 : allMatch(s -> s instanceof Student)
각 인스턴스에 대해 실행 : foreach(System.out::println)
각 인스턴스를 교체하기(요소변환) : map(s -> s.getName())
Integer타입을 int타입을 바꾸기 : mapToInt(Integer::intValue)
* 이렇게도 가능 : mapToInt(student -> student.getScore())

<결과 return하기(최종연산)>
배열로 return하기 : toArray(Student[]::new)
List로 return하기 : collect(Collectors.toList()) //ArrayList
* 주의 
(int, long, double 배열을) 배열로 return하기 : toArray();
(int, long, double 배열을) List로 return하기 : boxed().collect(Collectors.toList()) _그냥 toList하면 readOnly버전 List가 return됨 *boxed(), primitive 타입을 rapper클래스로 boxing하는거니까
첫 번째 값 return하기 : findFirst()
max(), min() //return Optional _getAsInt()
* 주의
sum, average, max 연산은 mapToInt()로 바꾸고 사용
sum()	//int
average //return Optional _getAsDouble()
count() //long
reduce() 연산 활용 
ex) 모든 요소 곱하기 : reduce((x, y) -> x * y)	//getAsInt()

종합 예시)stream
List<Student> students = Arrays.(students).sorted((o1, o2)->o1.getName().compareTo(o2.getName())).collect(Collectors.toList());

* 참고
int, long, double인 경우
IntStream, LongStream, DoubleStream이 생성됨
(다른 경우는 Stream<T> 형태로 생성됨)
따라서 사용가능한 stream메서드가 달라지는 현상

위 두 Stream에 대해서 각각 메서드 다 실행해보고 또 안되거나 다른거 있는지 확인

---------------------------------
카톡자료1
stream vs for
1. 가독성 (코드,취향 따라 다름)
2. 디버깅 (stream은 내부로직 복잡해서 exception이 직관적이지 않음)
3. 병렬처리 (stream은 병렬로 처리(thread로)하여 생기는 이점 존재) _각 e에 대해 메서드가 실행되는 경우
4. 물리적 성능 (원시타입인 경우는 for문>stream, 컬렉선 객체인 경우는 비슷) (for문이 옛날에 나와서 jvm 최적화가 많이 이루어짐, 컬렉션은 몰라) (근데 요즘엔 하드웨어빨이라 별 차이 안남 따라서 유지보수관점에서 결정하기)
결론
둘 다 시의적절히 사용할 필요
* https://youtu.be/by8hb75i9X4?si=DtFcntQDtq-Q846B

카톡자료2
함수형프로그래밍
순수함수 - 동일함 입력 -> 동일한 결과(외부상태를 변경x)
불변성 - 기존 데이터를 변경못함(새로운걸 만드는건 가능)
위 두가지로 인해 병렬처리 가능(여러스레드로 접근해도 바뀔염려x) : parellel()으로 병렬스트림 생성후 사용 (기존은 순차스트림임)

결론 
stream을 사용하기 좋은 경우 :
대량의 데이터에대해, 같은 연산을, 병렬처리하면 이득이며(필터링filter, 변환map 등등), 컬렉션객체로 뽑아낼때
안좋은 경우 : 처리할 데이터가 적은 경우(stream생성 오버헤드가 더 큼)
*https://youtu.be/hNeSEqsStqc?si=agZx78zGVCAEvFpp

Java Stream API는 왜 for-loop보다 느릴까?
: https://sigridjin.medium.com/java-stream-api%EB%8A%94-%EC%99%9C-for-loop%EB%B3%B4%EB%8B%A4-%EB%8A%90%EB%A6%B4%EA%B9%8C-50dec4b9974b



















