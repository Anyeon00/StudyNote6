[1. 객체지향프로그래밍]

Java를 사용한다고 해서 객체지향 언어는 아니다.

객체지향 프로그래밍
: 프로그램이 거대화되면서 등장, 기능을 가진 객체들로 작게 나눠서 만들고 합침

* 개념적인 용어 : 객체 / 기술적인 용어 : 클래스, 인스턴스


[2. 객체지향의특성]

(1) 캡슐화
- 완성도가 있다 
: 스스로 제 기능을 수행할 수 있음 (외부의존x)
- 정보가 은닉되어 있다 
: 밖에서 접근할 수 없음 (외부침략x)

(2) 상속
* 오해 : 공통된 기능을 여러 객체에 전달하고 싶을 떄 사용함
-> 추상/구체 관계에서만 사용해야함
ex) 생물 > 포유류 > 사람 > 남자 > 짱구

(3) 추상화
객체간의 관계에서, 상위 객체가 하위객체보다 추상적이어야 함
ex) Car extends Vehicle, Car implements Vehicle

(4) 다형성
형(type)을 여러가지로 표현할 수 있다.
ex) Vehicle로도, Car로도 표현 가능


[3. UML]
UML이란?
객체지향 프로그래밍 -> 기능을 객체에 나눠서 수행시킴
- 객체를 어떻게 구분했다
- 객체간의 연관관계가 어떠하다
를 설명

UML 종류?
Usecase Diagram
Sequence Diagram
**Class Diagram** <- 주로 사용
....

Class Diagram?
- 내가 아는 그거
- Tool : https://draw.io, https://dtaruml.io


[4. 객체지향설계] *메모장 - 스프링 핵심원리 기본편 - 섹션1 참고

어떻게 객체지향 설계를 잘 할 수 있을까?
= 어떻게 하면 객체를 잘 나누가 연관 지을 수 있을까?

SOLID 원칙
- SRP 단일 책임 원칙
: 한 클래스는 하나의 책임만 가져야 함
- OCP 개방-폐쇄 원칙
: 인터페이스의 구현체를 더 늘릴수는 있음, 인터페이스 사용객체는 변경할 필요가 없음
- LSP 리스코프 치환 원칙
: 프로그램 객체는 프로그램의 '정확성'을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.(인터페이스의 하위 클래스는 인터페이스의 규약을 지켜야함)
- ISP : 인터페이스 분리 원칙
: 인터페이스 단일 책임의 원칙이라고 생각하면 됨
DIP : 의존관계 역전 원칙
: 추상화에 의존해야지, 구체화에 의존하면 안됨
(인터페이스에 의존하고, 구현클래스에 의존하지 말라는 뜻)


디자인 패턴
- 위 SOLID에 설계에 따라 프로그래밍시 나온 공통점
- 23가지 패턴
* 숙제 : 위 23가지 패턴에 대해 정리




