[람다 표현식]
함수형 인터페이스를 이용한 익명클래스는 다음과 같이 작성
public static void main(String[] args){
  MyInterface mi = new MyInterface(){
    @Override
    public String greeting(){
      return "hello!";
    }
  };
}

하지만 여기서 
new MyInterface(){		//어떤 인터페이스를 인스턴셰이션할지
  @Override
  public String greeting(){}	//어떤 메서드를 구현할 지는 뻔함

따라서 뻔한 부분을 빼고 구현부만 남기면 다음과 같음
MyInterface mi = () { return "hello!";};
여기서 화살표만 추가하여 다음과 같이 사용
MyInterface mi = () -> { return "hello!"; }

==> 즉 요약하면
MyInterface 인터페이스를 어나니머스 오브젝트로 주입받을 때,
결국 단 하나의 메서드만 구현하므로,
그 구현 내용인 파라미터&함수바디만 작성
MyInterface mi = () -> { return "hello!"; }
mi.greeting(); //*사용*

+) 여기서 중괄호와 return도 뻔하므로 생략가능
MyInterface mi = () -> "hello!";

+) 다른 예
Arrays.sort(arr, (o1, o2) -> { ~ } );
// argument type 역시 정해져 있으므로 되는 듯


[메소드 레퍼런스]
최종적으로 적용될 메소드의 레퍼런스를 지정해주는 표현 방식
ex) 예시 설명
다음과 같은 String타입의 매개변수가 있는 인터페이스를 사용하는, 익명클래스의 람다표현식에서
MyMapper m = (str) -> { str.length(); }
String타입의 str을 받아서, 바로 str의 메서드를 실행함
-> 해당 변수타입의 메서드를 실행하는 것과 똑같음

따라서 다음과 같이 사용 가능
MyMapper m = String::length;
//length : 최종적으로 적용될 메소드, String : 메소드의 레퍼런스

* 요약 설명
함수형 인터페이스의 메서드에 argument가 있으며
함수바디에서 해당 parameter로 메서드를 실행할 때
: 굳이 parameter이름(str같은)을 쓰지않고, argument타입으로 메서드 실행
MyMapper m = (str) -> str.length(); 
-> MyMapper m = String::length;

* 알아둘 점 : parameter로 들어온 값을 변경없이 그대로 사용하는 경우임

Q. 의문사항?
+ 다른 예)
MyConsumer c = System.out::println;
// println : 최종적으로 적용될 메소드, System.out : 메소드의 레퍼런스
// parameter가 println 메서드의 parameter에 들어감
근데 아까는 paremeter가 receiver객체로 쓰였는데, 왜 여기선 parameter로 쓰임?

A. 챗지피티 답변
메소드 레퍼런스 타입은 4가지 유형으로 분류됨
1. InstanceType::instanceMethodName
: 매개변수를 리시버객체로 사용 ex) String::length
2. ClassName::instanceMethodName
: 해당클래스의 멤버함수의 매개변수로 전달 됨 ex) System.out::println
3. ClassName::staticMethodName
: 해당클래스의 스태틱메소드의 매개변수로 전달 됨 ex) String::valueOf
4. ClassName::new
: 해당클래스의 생성자의 매개변수로 전달 됨 ex) Supplier<MyObject> sup = MyObject::new

따라서 질문에 대한 답은, receiver객체로 쓰인 경우는 InstanceType::instanceMethodName유형이고
parameter로 쓰인 경우는 위 2번과 3번 중, 2번에 해당하기 때문임

---------------------------------------------
메서드 레퍼런스 타입 자세 설명

1. 인스턴스 메소드 레퍼런스 (InstanceType::instanceMethodName)
매개변수가 메소드의 리시버 객체로 사용됨
(String s) -> s.length() 로 사용됨
ex) MyInterface mi = String::length;

2. 특정 객체의 인스턴스 메소드 레퍼런스 (ClassName::instanceMethodName)
매개변수가 멤버함수의 매개변수로 전달됨
(x) -> System.out.println(x)로 사용됨
ex) MyInterface mi = System.out::println

3. 스태틱 메서드 레퍼런스 (ClassName::staticMethodName)
매개변수가 스태틱 메소드의 매개변수로 사용됨
(input) -> String.valueOf(input) 으로 사용됨
ex) MyInterface mi = String::valueOf;

4. 생성자 레퍼런스 (ClassName::new)
매개변수가 생성자의 매개변수로 전달 됨
() -> new MyObject()







