이전 장에서 정리한 내용 중
CPU가 수행하는 명령어 집합(ISA)에 있는
[명령어의 기능 및 종류]

1. 산술 및 논리 연산 명령
- ADD, SUB, MUL, DIV, ...
- AND, OR, NOT, ...

2. 데이터 전송 명령
- 레지스터/메모리/입출력장치 사이에 데이터 전송
- STR, LOAD, ...

3. 실행 제어 명령
- 프로그램의 실행을 순차에서 벗어나 다른 곳으로 옮김
(컴퓨터는 기본적으로 프로그램을 순차적으로 실행하므로)
- 브랜치, 점프, ...

4. 기타
- 인터럽트 제어, 명령어 실행 권한을 변경, ...


[어셈블리 프로그램 표현의 예]
C 프로그램 :
int a;
a = 10;
if(a == 10) a++;

어셈블리 Intel x86 :
mov eax, 10	
cmp eax, 10		//compare
jne LABEL1		//jump if not equal(같지 않으면 label1으로 jump)
inc eax		//increments(eax값을 1 증가)
LABEL 1:

어셈블리 ARM :
cmp R1, #10	//상수10과 R1비교
bne LABEL1		//branch if not equal(같지 않으면 LABEL로 이동)
add R1, R1, #1	//R1에 상수1을 더해서 R1에 넣어라
LABEL 1:

* 같은 ISA(명령어집합)더라도 구현한 마이크로아키텍처에 따라 달라짐


[CISC vs RISC]
위에서 마이크로아키텍처에 따라 다른 이유는, 서로 다른 철학으로 만들었기 때문

CISC (Complex Instruction Set Computing)
- 여러 동작을 한꺼번에 할 수 있는 여러가지의 명령어들을 제공
- 명령어들의 형식과 길이가 다양하고, 주소 지정 방식도 다양함
- 주로 마이크로프로그램(?) 제어 방식의 프로세서로 구성
*인텔

RISC (Reduced Instruction Set Computing)
- 철학 : CISC는 명령어가 너무 복잡하고 가짓수가 많아서 성능향상에 걸림돌이 된다!
- 명령어 길이는 고정, 명령어 종류는 최소한으로
- 주소 지정 방식 최소화, Load/Store 방식의 메모리 접근
- 한 클록 사이클에 최대 하나의 명령만 실행할 수 있도록 설계
*ARM

=> 프로그램 하나를 실행시키는데 몇개의 명령어가 필요하느냐는 CISC가 당연히 적음
RISC가 유리한 면도 존재함
성능을 높이기 위한 각각의 방법


